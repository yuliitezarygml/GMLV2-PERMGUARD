#!/usr/bin/env python3
"""
PermGuard Real-time Log Monitor
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏ PermGuard –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import sys
import time
import threading
from datetime import datetime
from pathlib import Path

def clear_console():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    print("=" * 80)
    print("  PERMGUARD REAL-TIME MONITOR")
    print("=" * 80)
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Log file: permguard_detailed.log")
    print("Monitoring... (Press Ctrl+C to stop)")
    print("=" * 80)
    print()

def format_log_line(line, line_number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    line = line.strip()
    if not line:
        return None

    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
    current_time = datetime.now().strftime('%H:%M:%S')

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è
    formatted = f"[{line_number:04d}] [{current_time}] {line}"

    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Windows)
    if 'ALLOWED' in line or 'successful' in line or 'initialized successfully' in line:
        return f"{formatted}"  # –ó–µ–ª–µ–Ω—ã–π - —É–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è Windows
    elif 'DENIED' in line or 'ERROR' in line or 'Failed' in line:
        return f"!!! {formatted}"  # –ö—Ä–∞—Å–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    elif 'WARNING' in line or 'warning' in line:
        return f"*** {formatted}"  # –ñ–µ–ª—Ç—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    elif 'AUTH REQUEST' in line or 'Making authorization request' in line:
        return f">>> {formatted}"  # –ì–æ–ª—É–±–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    elif 'TRAFFIC' in line or 'GET ' in line or 'POST ' in line:
        return f"~~~ {formatted}"  # –ü—É—Ä–ø—É—Ä–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    elif 'ADMIN ACCESS' in line or 'admin' in line.lower():
        return f"### {formatted}"  # –ñ–∏—Ä–Ω—ã–π —Å–∏–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    elif 'INFO' in line or 'DEBUG' in line:
        return formatted  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    else:
        return formatted

def show_recent_logs(num_lines=5):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤"""
    log_file_path = Path("permguard_detailed.log")

    if not log_file_path.exists():
        print("No recent logs available yet...")
        return

    try:
        with open(log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
            recent_lines = lines[-num_lines:] if len(lines) >= num_lines else lines

            print("RECENT ACTIVITY:")
            print("-" * 60)
            for i, line in enumerate(recent_lines):
                formatted_line = format_log_line(line, len(lines) - len(recent_lines) + i + 1)
                if formatted_line:
                    print(formatted_line)
            print("-" * 60)
            print(f"Now monitoring for new logs... (Total lines: {len(lines)})")
    except Exception as e:
        print(f"Error reading recent logs: {e}")

def monitor_log_file():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    log_file_path = Path("permguard_detailed.log")

    # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not log_file_path.exists():
        print("Log file not found. Creating...")
        log_file_path.touch()
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –ª–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    show_recent_logs(10)

    line_number = 0

    try:
        with open(log_file_path, 'r', encoding='utf-8') as f:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            lines = f.readlines()
            line_number = len(lines)

            # –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ü—É —Ñ–∞–π–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
            f.seek(0, 2)

            while True:
                line = f.readline()
                if line:
                    line_number += 1
                    formatted_line = format_log_line(line, line_number)
                    if formatted_line:
                        print(f"\n>>> NEW: {formatted_line}")
                        sys.stdout.flush()
                else:
                    time.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫

    except KeyboardInterrupt:
        print("\n\n" + "=" * 80)
        print("‚èπÔ∏è  Monitoring stopped by user")
        print(f"[STATS] Total lines processed: {line_number}")
        print("=" * 80)
    except Exception as e:
        print(f"\n[ERROR] Error monitoring log file: {e}")

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    log_file_path = Path("permguard_detailed.log")

    if not log_file_path.exists():
        print("üìÑ No log file found yet.")
        return

    try:
        with open(log_file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        total_lines = len(lines)
        auth_requests = len([l for l in lines if 'üõ°Ô∏è' in l or 'AUTH REQUEST' in l])
        allowed = len([l for l in lines if '‚úÖ' in l or 'ALLOWED' in l])
        denied = len([l for l in lines if '[X]' in l and 'DENIED' in l])
        errors = len([l for l in lines if 'ERROR' in l])
        warnings = len([l for l in lines if 'WARNING' in l])
        traffic = len([l for l in lines if 'üåê' in l or 'TRAFFIC' in l])

        print("LOG STATISTICS:")
        print(f"   Total lines: {total_lines}")
        print(f"   Auth requests: {auth_requests}")
        print(f"   ‚úÖ Allowed: {allowed}")
        print(f"   [X] Denied: {denied}")
        print(f"   üåê Traffic logs: {traffic}")
        print(f"   ‚ö†Ô∏è  Warnings: {warnings}")
        print(f"   üí• Errors: {errors}")
        print()

    except Exception as e:
        print(f"[ERROR] Error reading stats: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    clear_console()
    print_header()

    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_stats()

    print("\n" + "=" * 80)
    print("LIVE LOG STREAM (Press Ctrl+C to stop)")
    print("=" * 80)

    # –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_log_file()

if __name__ == "__main__":
    main()